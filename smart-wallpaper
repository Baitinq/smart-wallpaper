#!/bin/bash

trap cleanup EXIT

period=500
resolution=$(xdpyinfo | awk '/dimensions/{print $2}')

framerate=''
delay_flag=''
randomize=false
optimize=false
input_daytimewallpaper=''
input_nighttimewallpaper=''
daytimewallpaper=''
nighttimewallpaper=''
currentwallpaper=''
location=''

currenttime='pn5Lf1f8SH' #random string so the first loop works
timebool=false
fullscreen=false
procid=''
fullscreencheck_process=''

cleanup() {
  if [[ $procid != '' ]]; then
    kill $procid
  fi
  killall gifview #TODO: gotta kill mpv as well (but not all instances) HELP NEEDED
  xsetroot -solid black
}

print_usage() {
  echo "Usage: smart-wallpaper [FLAG]
    Flags:
      [-d]: NEEDED   : daytime wallpaper file/folder
      [-n]: NEEDED   : nighttime wallpaper file/folder
      [-l]: OPTIONAL : manual location (lat:long), if not added geoclue gets the location (requires internet)
      [-t]: OPTIONAL : set the time period (seconds) for the script to check if it is day or night
      [-f]: OPTIONAL : set the framerate for the gif. Lower framerates = lower CPU usage.
      [-r]: OPTIONAL : changes the wallpaper every day/night iteration
      [-h]: OPTIONAL : print help message"
}

set_wallpaper() {

  if [[ $procid != '' ]]; then
    kill $procid
  fi

  killall xwinwrap
  killall gifview #TODO: gotta kill mpv as well (but not all instances) HELP NEEDED

    if [ -f /usr/bin/gifview ] && [[ $1 == *".gif" ]]; then
      echo "gifsicle --resize $resolution $delay_flag \$1 | gifview --animate -w \$2" > /tmp/smart-wallpaper-gifcmd
      nice xwinwrap -ov -ni -s -nf -un -argb -r -g $resolution -- nice sh /tmp/smart-wallpaper-gifcmd $1 WID &
      procid=$!
    elif [ -f /usr/bin/mpv ] && [[ $1 == *".mp4" ]] || [[ $1 == *".mov" ]] || [[ $1 == *".avi" ]] || [[ $1 == *".mkv" ]]; then
      nice xwinwrap -ni -ov -ni -s -nf -un -argb -r -g $resolution -- nice mpv --fullscreen --on-all-workspaces --no-config --no-input-default-bindings --no-stop-screensaver --loop-file --no-audio --no-osc --no-osd-bar -wid WID --quiet $1 &
      procid=$!
    else
      nice xwinwrap -ni -fs -st -sp -nf -ov -s -r -debug -- feh --window-id WID -F --zoom fill -g $resolution $1
      procid=$!
    fi

}

drawwallpaper(){
  if [ $timebool == false ]; then
    if [ "$location" != "" ]; then
      if redshift -l $location -p | grep -i -q "day"; then
        currenttime="day"
        set_wallpaper "$daytimewallpaper"
	currentwallpaper="$daytimewallpaper"
      else
        currenttime="night"
        set_wallpaper "$nighttimewallpaper"
	currentwallpaper="$nighttimewallpaper"
      fi
    else
      if redshift -p | grep -i -q "day"; then
        currenttime="day"
        set_wallpaper "$daytimewallpaper"
	currentwallpaper="$daytimewallpaper"
      else
        currenttime="night"
        set_wallpaper "$nighttimewallpaper"
	currentwallpaper="$nighttimewallpaper"
      fi
    fi
  fi
}

checktime() {
  if [ "$location" != "" ]; then
    if redshift -l $location -p | grep -i -q "$currenttime"; then
      timebool=true
    else
      if [ "$randomize" == true ]; then
        daytimewallpaper=$(find $input_daytimewallpaper -type f | shuf -n 1)
        nighttimewallpaper=$(find $input_nighttimewallpaper -type f | shuf -n 1)
      fi
      timebool=false
    fi
  else
    if redshift -p | grep -i -q "$currenttime"; then
      timebool=true
    else
      if [ "$randomize" == true ]; then
        daytimewallpaper=$(find $input_daytimewallpaper -type f | shuf -n 1)
        nighttimewallpaper=$(find $input_nighttimewallpaper -type f | shuf -n 1)
      fi
      timebool=false
    fi
  fi
}

if (( $# == 0 )); then
    print_usage
    exit 1
fi

while getopts 'd:n:l:t:f:roh' flag; do
  case "${flag}" in
    d) input_daytimewallpaper="${OPTARG}"    ;;
    n) input_nighttimewallpaper="${OPTARG}"  ;;
    t) period="${OPTARG}"                    ;;
	f) framerate="${OPTARG}"                 ;;
    l) location="${OPTARG}"                  ;;
    r) randomize=true                        ;;
    o) optimize=true                         ;;
    h) print_usage
       exit 0                                ;;
    *) print_usage
       exit 1                                ;;
  esac
done

if [ "$input_daytimewallpaper" == "" ]; then
  print_usage
  exit 1
fi

if [ "$input_nighttimewallpaper" == "" ]; then
  print_usage
  exit 1
fi

if [ "$randomize" == false ]; then
  daytimewallpaper=$(find $input_daytimewallpaper -type f | shuf -n 1)
  nighttimewallpaper=$(find $input_nighttimewallpaper -type f | shuf -n 1)
fi

if [[ ! $framerate = '' ]]; then
	delay_flag="--delay $(expr 100 / $framerate)"
fi

while true
do

  checktime

  drawwallpaper

  sleep $period

done
