#!/bin/bash

trap cleanup EXIT

period=500
resolution=$(xdpyinfo | awk '/dimensions/{print $2}')

randomize=false
optimize=false
input_daytimewallpaper=''
input_nighttimewallpaper=''
daytimewallpaper=''
nighttimewallpaper=''
currentwallpaper=''
location=''

currenttime='pn5Lf1f8SH' #random string so the first loop works
timebool=false
fullscreen=false
procid=''
fullscreencheck_process=''

cleanup() {
  if [[ $fullscreencheck_process != '' ]]; then
    kill $fullscreencheck_process
  fi
  if [[ $procid != '' ]]; then
    kill $procid
  fi
  killall gifview #TODO: gotta kill mpv as well (but not all)
  xsetroot -solid black
}

print_usage() {
  echo "Usage: smart-wallpaper [FLAG]"
  echo "  Flags:"
  echo "    [-d]: NEEDED   : daytime wallpaper file/folder"
  echo "    [-n]: NEEDED   : nighttime wallpaper file/folder"
  echo "    [-l]: OPTIONAL : manual location (lat:long), if not added geoclue gets the location (requires internet)"
  echo "    [-t]: OPTIONAL : set the time period (seconds) for the script to check if it is day or night "
  echo "    [-r]: OPTIONAL : changes the wallpaper every day/night iteration"
  echo "    [-o]: OPTIONAL : [BETA] checks weather you are in fullscreen to stop the wallpaper (less cpu power)"
  echo "    [-h]: OPTIONAL : print help message"
}

checkfullscreen(){	
	WINDOW=$(echo $(xwininfo -id $(xdotool getactivewindow) -stats | \
        egrep '(Width|Height):' | \
        awk '{print $NF}') | \
        sed -e 's/ /x/')
	SCREEN=$(xdpyinfo | grep -m1 dimensions | awk '{print $2}')
	if [ "$WINDOW" = "$SCREEN" ]; then
                if [ "$fullscreen" == false ]; then
			sleep 10
			if [ "$WINDOW" = "$SCREEN" ]; then
                		killall gifview #pause shit
			fi

		fi
                
		fullscreen=true
        else
                if [ "$fullscreen" == true ]; then
			checktime
			drawwallpaper #resume shit
                fi
                
		fullscreen=false
        fi

	#detect screen change. If now false then restore wallpaper (instead of killing it every time if true). If now true then kill mpv and gifiew (mpv not yet, gotta figure out). This could all be done if an optimze flag is added.
}

set_wallpaper() {

  #if [[ $procid != '' ]]; then
  #  kill $procid
  #fi

  killall gifview

  if [ -f /usr/bin/xwinwrap ]; then
    if [ -f /usr/bin/gifview ] && [[ $1 == *".gif" ]]; then
      echo "gifsicle --resize $resolution \$1 | gifview --animate -w \$2" > /tmp/smart-wallpaper-gifcmd
      xwinwrap -ov -ni -s -nf -un -argb -g $resolution -- sh /tmp/smart-wallpaper-gifcmd $1 WID &
      procid=$!
    elif [ -f /usr/bin/mpv ] && [[ $1 == *".mp4" ]] || [[ $1 == *".mov" ]] || [[ $1 == *".avi" ]] || [[ $1 == *".wav" ]]; then
      xwinwrap -ni -ov -ni -s -nf -un -argb -g $resolution -- mpv --fullscreen --on-all-workspaces --no-config --no-input-default-bindings --no-stop-screensaver --loop-file --no-audio --no-osc --no-osd-bar -wid WID --quiet $1 &
      procid=$!
    else
      feh --no-fehbg --bg-fill $1
      procid=''
    fi
  else
    if [ -f /usr/bin/gifview ] && [[ $1 == *".gif" ]]; then
      gifsicle --resize $resolution $1 | gifview --animate -w root &
      procid=$!
    elif [ -f /usr/bin/mpv ] && [[ $1 == *".mp4" ]] || [[ $1 == *".mov" ]] || [[ $1 == *".avi" ]] || [[ $1 == *".wav" ]]; then
      mpv --fullscreen --on-all-workspaces --no-config --no-input-default-bindings --no-stop-screensaver --loop-file --no-audio --no-osc --no-osd-bar -wid 0 --quiet $1 &
      procid=$!
    else
      feh --no-fehbg --bg-fill $1
      procid=''
    fi
  fi

}

drawwallpaper(){
  if [ $timebool == false ]; then
    if [ "$location" != "" ]; then
      if redshift -l $location -p | grep -i -q "day"; then
        currenttime="day"
        set_wallpaper "$daytimewallpaper"
	currentwallpaper="$daytimewallpaper"
      else
        currenttime="night"
        set_wallpaper "$nighttimewallpaper"
	currentwallpaper="$nighttimewallpaper"
      fi
    else
      if redshift -p | grep -i -q "day"; then
        currenttime="day"
        set_wallpaper "$daytimewallpaper"
	currentwallpaper="$daytimewallpaper"
      else
        currenttime="night"
        set_wallpaper "$nighttimewallpaper"
	currentwallpaper="$nighttimewallpaper"
      fi
    fi
  fi
}

checktime() {
  if [ "$location" != "" ]; then
    if redshift -l $location -p | grep -i -q "$currenttime"; then
      timebool=true
    else
      if [ "$randomize" == true ]; then
        daytimewallpaper=$(find $input_daytimewallpaper -type f | shuf -n 1)
        nighttimewallpaper=$(find $input_nighttimewallpaper -type f | shuf -n 1)
      fi
      timebool=false
    fi
  else
    if redshift -p | grep -i -q "$currenttime"; then
      timebool=true
    else
      if [ "$randomize" == true ]; then
        daytimewallpaper=$(find $input_daytimewallpaper -type f | shuf -n 1)
        nighttimewallpaper=$(find $input_nighttimewallpaper -type f | shuf -n 1)
      fi
      timebool=false
    fi
  fi
}

if (( $# == 0 )); then
    print_usage
    exit 1
fi

while getopts 'd:n:l:t:roh' flag; do
  case "${flag}" in
    d) input_daytimewallpaper="${OPTARG}"    ;;
    n) input_nighttimewallpaper="${OPTARG}"  ;;
    t) period="${OPTARG}"                    ;;
    l) location="${OPTARG}"                  ;;
    r) randomize=true                        ;;
    o) optimize=true                         ;;
    h) print_usage
       exit 0                                ;;
    *) print_usage
       exit 1                                ;;
  esac
done

if [ "$input_daytimewallpaper" == "" ]; then
  print_usage
  exit 1
fi

if [ "$input_nighttimewallpaper" == "" ]; then
  print_usage
  exit 1
fi

if [ "$randomize" == false ]; then
  daytimewallpaper=$(find $input_daytimewallpaper -type f | shuf -n 1)
  nighttimewallpaper=$(find $input_nighttimewallpaper -type f | shuf -n 1)
fi

if [ "$optimize" == true ] && [ [ "$currentwallpaper" == *".gif" ] || [ "$currentwallpaper" == *".mp4" ] || [ "$currentwallpaper" == *".mov" ] || [ "$currentwallpaper" == *".avi" ] || [ "$currentwallpaper" == *".wav" ] ]; then
	while true
	do
		
		checkfullscreen

   		sleep 10

	done &
	fullscreencheck_process=$!
fi

while true
do

  checktime

  drawwallpaper

  sleep $period

done
